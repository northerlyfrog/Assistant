{"version":3,"sources":["../src/data_formatter.js"],"names":[],"mappings":"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","file":"data_formatter.js","sourcesContent":["import _ from 'lodash';\nimport decodeGeoHash from './geohash';\n\nexport default class DataFormatter {\n  constructor(ctrl, kbn) {\n    this.ctrl = ctrl;\n    this.kbn = kbn;\n  }\n\n  setValues(data) {\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      this.ctrl.series.forEach((serie) => {\n        const lastPoint = _.last(serie.datapoints);\n        const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n        const location = _.find(this.ctrl.locations, (loc) => { return loc.key.toUpperCase() === serie.alias.toUpperCase(); });\n\n        if (!location) return;\n\n        if (_.isString(lastValue)) {\n          data.push({key: serie.alias, value: 0, valueFormatted: lastValue, valueRounded: 0});\n        } else {\n          const dataValue = {\n            key: serie.alias,\n            locationName: location.name,\n            locationLatitude: location.latitude,\n            locationLongitude: location.longitude,\n            value: serie.stats[this.ctrl.panel.valueName],\n            valueFormatted: lastValue,\n            valueRounded: 0\n          };\n\n          if (dataValue.value > highestValue) highestValue = dataValue.value;\n          if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n          dataValue.valueRounded = this.kbn.roundValue(dataValue.value, parseInt(this.ctrl.panel.decimals, 10) || 0);\n          data.push(dataValue);\n        }\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n\n  createDataValue(encodedGeohash, decodedGeohash, locationName, value, highestValue, lowestValue) {\n    const dataValue = {\n      key: encodedGeohash,\n      locationName: locationName,\n      locationLatitude: decodedGeohash.latitude,\n      locationLongitude: decodedGeohash.longitude,\n      value: value,\n      valueFormatted: value,\n      valueRounded: 0\n    };\n\n    dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n    return dataValue;\n  }\n\n  setGeohashValues(dataList, data) {\n    if (!this.ctrl.panel.esGeoPoint || !this.ctrl.panel.esMetric) return;\n\n    if (dataList && dataList.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      dataList.forEach((result) => {\n        if (result.type === 'table') {\n          const columnNames = {};\n\n          result.columns.forEach((column, columnIndex) => {\n            columnNames[column.text] = columnIndex;\n          });\n\n          result.rows.forEach((row) => {\n            const encodedGeohash = row[columnNames[this.ctrl.panel.esGeoPoint]];\n            const decodedGeohash = decodeGeoHash(encodedGeohash);\n            const locationName = this.ctrl.panel.esLocationName ? row[columnNames[this.ctrl.panel.esLocationName]] : encodedGeohash;\n            const value = row[columnNames[this.ctrl.panel.esMetric]];\n\n            const dataValue = this.createDataValue(encodedGeohash, decodedGeohash, locationName, value, highestValue, lowestValue);\n            if (dataValue.value > highestValue) highestValue = dataValue.value;\n            if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n            data.push(dataValue);\n          });\n\n          data.highestValue = highestValue;\n          data.lowestValue = lowestValue;\n          data.valueRange = highestValue - lowestValue;\n        } else {\n          result.forEach((datapoint) => {\n            const encodedGeohash = datapoint[this.ctrl.panel.esGeoPoint];\n            const decodedGeohash = decodeGeoHash(encodedGeohash);\n            const locationName = this.ctrl.panel.esLocationName ? datapoint[this.ctrl.panel.esLocationName] : encodedGeohash;\n            const value =  datapoint[this.ctrl.panel.esMetric];\n\n            const dataValue = this.createDataValue(encodedGeohash, decodedGeohash, locationName, value, highestValue, lowestValue);\n            if (dataValue.value > highestValue) highestValue = dataValue.value;\n            if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n            data.push(dataValue);\n          });\n\n          data.highestValue = highestValue;\n          data.lowestValue = lowestValue;\n          data.valueRange = highestValue - lowestValue;\n        }\n      });\n    }\n  }\n\n  static tableHandler(tableData) {\n    const datapoints = [];\n\n    if (tableData.type === 'table') {\n      const columnNames = {};\n\n      tableData.columns.forEach((column, columnIndex) => {\n        columnNames[columnIndex] = column.text;\n      });\n\n      tableData.rows.forEach((row) => {\n        const datapoint = {};\n\n        row.forEach((value, columnIndex) => {\n          const key = columnNames[columnIndex];\n          datapoint[key] = value;\n        });\n\n        datapoints.push(datapoint);\n      });\n    }\n\n    return datapoints;\n  }\n\n  setTableValues(tableData, data) {\n    if (tableData && tableData.length > 0) {\n      let highestValue = 0;\n      let lowestValue = Number.MAX_VALUE;\n\n      tableData[0].forEach((datapoint) => {\n        if (!datapoint.geohash) {\n          return;\n        }\n\n        const encodedGeohash = datapoint.geohash;\n        const decodedGeohash = decodeGeoHash(encodedGeohash);\n\n        const dataValue = {\n          key: encodedGeohash,\n          locationName: datapoint[this.ctrl.panel.tableLabel] || 'n/a',\n          locationLatitude: decodedGeohash.latitude,\n          locationLongitude: decodedGeohash.longitude,\n          value: datapoint.metric,\n          valueFormatted: datapoint.metric,\n          valueRounded: 0\n        };\n\n        if (dataValue.value > highestValue) highestValue = dataValue.value;\n        if (dataValue.value < lowestValue) lowestValue = dataValue.value;\n\n        dataValue.valueRounded = this.kbn.roundValue(dataValue.value, this.ctrl.panel.decimals || 0);\n        data.push(dataValue);\n      });\n\n      data.highestValue = highestValue;\n      data.lowestValue = lowestValue;\n      data.valueRange = highestValue - lowestValue;\n    }\n  }\n}\n"]}